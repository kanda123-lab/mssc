name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  CACHE_KEY_PREFIX: 'devtools-platform'

jobs:
  # Quality checks and linting
  quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=${{ env.CACHE_KEY_PREFIX }}-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: TypeScript type checking
        run: npm run type-check

      - name: ESLint analysis
        run: npm run lint
        continue-on-error: false

      - name: Prettier formatting check
        run: npm run format:check

      - name: Check for security vulnerabilities
        run: npm audit --audit-level moderate
        continue-on-error: true

  # Unit and integration tests
  test-unit:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run unit tests with coverage
        run: npm run test:ci
        env:
          NODE_ENV: test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: unit-tests-coverage
          fail_ci_if_error: false
        continue-on-error: true

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 5

  # Build application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            !.next/cache
          retention-days: 5

      - name: Analyze bundle size
        run: |
          npm run analyze || true
          echo "Bundle analysis completed"

  # End-to-end tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          CI: true

      - name: Upload E2E test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  # Performance and accessibility testing
  test-performance:
    name: Performance & Accessibility Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run performance tests
        run: npx playwright test e2e/performance.spec.ts
        env:
          NODE_ENV: production

      - name: Run accessibility tests
        run: npx playwright test e2e/accessibility.spec.ts
        env:
          NODE_ENV: production

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: |
            test-results/
            lighthouse-reports/
          retention-days: 5

  # Security scanning
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: |
          npm audit --audit-level high --json > security-audit.json || true
          
      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: 'javascript'
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            security-audit.json
          retention-days: 7

  # Quality gate check
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [quality, test-unit, test-e2e, build]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.quality.result }}" != "success" ]]; then
            echo "‚ùå Code quality checks failed"
            exit 1
          fi
          
          if [[ "${{ needs.test-unit.result }}" != "success" ]]; then
            echo "‚ùå Unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå Build failed"
            exit 1
          fi
          
          if [[ "${{ needs.test-e2e.result }}" != "success" ]]; then
            echo "‚ùå E2E tests failed"
            exit 1
          fi
          
          echo "‚úÖ All quality gates passed"

  # Deployment (conditional)
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gate]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Deploy notification
        run: |
          echo "üöÄ Deployment would happen here"
          echo "‚úÖ All checks passed, ready for production deployment"
          
      # Uncomment and configure for actual deployment
      # - name: Deploy to Vercel
      #   uses: amondnet/vercel-action@v20
      #   with:
      #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
      #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
      #     vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
      #     vercel-args: '--prod'

  # Notification job
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [quality-gate, deploy]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.quality-gate.result == 'success'
        run: |
          echo "‚úÖ CI/CD Pipeline completed successfully!"
          echo "üìä All tests passed"
          echo "üîí Security checks completed"
          echo "üöÄ Ready for deployment"
          
      - name: Notify on failure
        if: needs.quality-gate.result == 'failure'
        run: |
          echo "‚ùå CI/CD Pipeline failed!"
          echo "üîç Check the failed jobs above"
          exit 1