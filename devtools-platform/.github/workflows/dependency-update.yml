name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      update_type:
        description: 'Type of updates'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - all

env:
  NODE_VERSION: '20'

jobs:
  # Security updates (always run)
  security-updates:
    name: Security Updates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for security vulnerabilities
        run: |
          npm audit --audit-level moderate --json > security-audit.json
          
          # Check if there are fixable vulnerabilities
          FIXABLE=$(cat security-audit.json | jq -r '.metadata.vulnerabilities.total // 0')
          echo "FIXABLE_VULNS=$FIXABLE" >> $GITHUB_ENV

      - name: Apply security fixes
        if: env.FIXABLE_VULNS != '0'
        run: |
          npm audit fix
          
          # Check if package-lock.json was modified
          if git diff --exit-code package-lock.json; then
            echo "No security fixes applied"
            echo "SECURITY_FIXES=false" >> $GITHUB_ENV
          else
            echo "Security fixes applied"
            echo "SECURITY_FIXES=true" >> $GITHUB_ENV
          fi

      - name: Run tests after security fixes
        if: env.SECURITY_FIXES == 'true'
        run: |
          npm run type-check
          npm run lint
          npm run test:ci

      - name: Create security fix PR
        if: env.SECURITY_FIXES == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            const branchName = `security-updates-${Date.now()}`;
            
            // Create and switch to new branch
            execSync(`git checkout -b ${branchName}`);
            
            // Commit changes
            execSync('git config user.name "github-actions[bot]"');
            execSync('git config user.email "41898282+github-actions[bot]@users.noreply.github.com"');
            execSync('git add package-lock.json');
            execSync('git commit -m "üîí Apply security fixes from npm audit"');
            execSync(`git push origin ${branchName}`);
            
            // Create PR
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üîí Security Updates',
              head: branchName,
              base: 'main',
              body: `## Security Updates
              
              This PR applies security fixes identified by \`npm audit\`.
              
              ### Changes:
              - Updated dependencies to fix security vulnerabilities
              - All tests pass with the updates
              
              ### Verification:
              - [x] \`npm audit\` shows no high/critical vulnerabilities
              - [x] All tests pass
              - [x] TypeScript compilation successful
              - [x] Linting passes
              
              **Auto-generated by dependency update workflow**
              `
            });
            
            console.log(`Created PR: ${pr.html_url}`);

  # Regular dependency updates
  dependency-updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    if: github.event.inputs.update_type != '' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Check for available updates
        run: |
          echo "## Available Updates" > update-report.md
          echo "" >> update-report.md
          
          UPDATE_TYPE="${{ inputs.update_type || 'patch' }}"
          
          case $UPDATE_TYPE in
            "patch")
              ncu --target patch --format lines > available-updates.txt || true
              ;;
            "minor")
              ncu --target minor --format lines > available-updates.txt || true
              ;;
            "major")
              ncu --format lines > available-updates.txt || true
              ;;
            "all")
              ncu --format lines > available-updates.txt || true
              ;;
          esac
          
          if [ -s available-updates.txt ]; then
            echo "Updates available:" >> update-report.md
            echo "\`\`\`" >> update-report.md
            cat available-updates.txt >> update-report.md
            echo "\`\`\`" >> update-report.md
            echo "HAS_UPDATES=true" >> $GITHUB_ENV
          else
            echo "No updates available" >> update-report.md
            echo "HAS_UPDATES=false" >> $GITHUB_ENV
          fi

      - name: Apply updates
        if: env.HAS_UPDATES == 'true'
        run: |
          UPDATE_TYPE="${{ inputs.update_type || 'patch' }}"
          
          case $UPDATE_TYPE in
            "patch")
              ncu -u --target patch
              ;;
            "minor")
              ncu -u --target minor
              ;;
            "major")
              ncu -u
              ;;
            "all")
              ncu -u
              ;;
          esac
          
          # Install updated dependencies
          npm install

      - name: Run comprehensive tests
        if: env.HAS_UPDATES == 'true'
        run: |
          # Type checking
          npm run type-check || echo "TYPE_CHECK_FAILED=true" >> $GITHUB_ENV
          
          # Linting
          npm run lint || echo "LINT_FAILED=true" >> $GITHUB_ENV
          
          # Unit tests
          npm run test:ci || echo "UNIT_TESTS_FAILED=true" >> $GITHUB_ENV

      - name: Test critical functionality
        if: env.HAS_UPDATES == 'true'
        run: |
          # Build application
          npm run build || echo "BUILD_FAILED=true" >> $GITHUB_ENV
          
          # Quick E2E smoke tests
          npx playwright install chromium --with-deps
          npx playwright test e2e/homepage.spec.ts --project=chromium || echo "E2E_FAILED=true" >> $GITHUB_ENV

      - name: Generate test report
        if: env.HAS_UPDATES == 'true'
        run: |
          echo "## Test Results" >> update-report.md
          echo "" >> update-report.md
          
          if [[ "$TYPE_CHECK_FAILED" == "true" ]]; then
            echo "‚ùå TypeScript compilation failed" >> update-report.md
          else
            echo "‚úÖ TypeScript compilation passed" >> update-report.md
          fi
          
          if [[ "$LINT_FAILED" == "true" ]]; then
            echo "‚ùå Linting failed" >> update-report.md
          else
            echo "‚úÖ Linting passed" >> update-report.md
          fi
          
          if [[ "$UNIT_TESTS_FAILED" == "true" ]]; then
            echo "‚ùå Unit tests failed" >> update-report.md
          else
            echo "‚úÖ Unit tests passed" >> update-report.md
          fi
          
          if [[ "$BUILD_FAILED" == "true" ]]; then
            echo "‚ùå Build failed" >> update-report.md
          else
            echo "‚úÖ Build passed" >> update-report.md
          fi
          
          if [[ "$E2E_FAILED" == "true" ]]; then
            echo "‚ùå E2E smoke tests failed" >> update-report.md
          else
            echo "‚úÖ E2E smoke tests passed" >> update-report.md
          fi
          
          # Determine if tests passed
          if [[ "$TYPE_CHECK_FAILED$LINT_FAILED$UNIT_TESTS_FAILED$BUILD_FAILED" == "" ]]; then
            echo "TESTS_PASSED=true" >> $GITHUB_ENV
          else
            echo "TESTS_PASSED=false" >> $GITHUB_ENV
          fi

      - name: Create update PR (if tests pass)
        if: env.HAS_UPDATES == 'true' && env.TESTS_PASSED == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            const updateType = '${{ inputs.update_type || "patch" }}';
            const branchName = `dependency-updates-${updateType}-${Date.now()}`;
            
            // Create and switch to new branch
            execSync(`git checkout -b ${branchName}`);
            
            // Commit changes
            execSync('git config user.name "github-actions[bot]"');
            execSync('git config user.email "41898282+github-actions[bot]@users.noreply.github.com"');
            execSync('git add package.json package-lock.json');
            execSync(`git commit -m "‚¨ÜÔ∏è Update ${updateType} dependencies"`);
            execSync(`git push origin ${branchName}`);
            
            // Read update report
            const updateReport = fs.readFileSync('update-report.md', 'utf8');
            
            // Create PR
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `‚¨ÜÔ∏è Update ${updateType} dependencies`,
              head: branchName,
              base: 'main',
              body: `## Dependency Updates (${updateType})
              
              ${updateReport}
              
              ### Verification Checklist:
              - [x] TypeScript compilation successful
              - [x] All tests pass
              - [x] Linting passes  
              - [x] Application builds successfully
              - [x] Critical functionality tested
              
              **Auto-generated by dependency update workflow**
              
              > ‚ö†Ô∏è Please review the changes and run additional tests if needed before merging.
              `
            });
            
            console.log(`Created PR: ${pr.html_url}`);

      - name: Create issue (if tests fail)
        if: env.HAS_UPDATES == 'true' && env.TESTS_PASSED == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const updateReport = fs.readFileSync('update-report.md', 'utf8');
            
            const title = `üö® Dependency Update Failed - ${new Date().toLocaleDateString()}`;
            const body = `
            ## Dependency Update Failure
            
            **Update Type:** ${{ inputs.update_type || 'patch' }}
            **Date:** ${new Date().toISOString()}
            
            ${updateReport}
            
            ### Action Required:
            - [ ] Review failed tests
            - [ ] Fix breaking changes
            - [ ] Update code to work with new dependencies
            - [ ] Run manual testing
            
            **Auto-generated by dependency update workflow**
            `;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['dependencies', 'ci/cd', 'needs-investigation']
            });

  # DevDependency updates (less critical)
  dev-dependency-updates:
    name: Dev Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || inputs.update_type == 'all'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Update dev dependencies
        run: |
          # Update only devDependencies
          ncu -u --dep dev --target minor
          npm install

      - name: Test dev dependency updates
        run: |
          npm run type-check
          npm run lint
          npm run test:ci
          npm run build

      - name: Create dev dependency PR
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const { execSync } = require('child_process');
            
            // Check if there are changes
            try {
              execSync('git diff --exit-code package.json package-lock.json');
              console.log('No dev dependency updates available');
              return;
            } catch {
              // Changes exist, continue with PR creation
            }
            
            const branchName = `dev-dependency-updates-${Date.now()}`;
            
            // Create and switch to new branch
            execSync(`git checkout -b ${branchName}`);
            
            // Commit changes
            execSync('git config user.name "github-actions[bot]"');
            execSync('git config user.email "41898282+github-actions[bot]@users.noreply.github.com"');
            execSync('git add package.json package-lock.json');
            execSync('git commit -m "‚¨ÜÔ∏è Update dev dependencies"');
            execSync(`git push origin ${branchName}`);
            
            // Create PR
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '‚¨ÜÔ∏è Update dev dependencies',
              head: branchName,
              base: 'main',
              body: `## Dev Dependency Updates
              
              This PR updates development dependencies to their latest minor versions.
              
              ### Changes:
              - Updated devDependencies (testing, linting, build tools)
              - All tests and builds pass with updates
              
              ### Verification:
              - [x] TypeScript compilation successful
              - [x] All tests pass
              - [x] Linting passes
              - [x] Application builds successfully
              
              **Auto-generated by dependency update workflow**
              
              > ‚ÑπÔ∏è Dev dependencies typically have lower risk, but please review before merging.
              `
            });
            
            console.log(`Created dev dependency PR: ${pr.html_url}`);

  # Notification summary
  notification:
    name: Update Summary
    runs-on: ubuntu-latest
    needs: [security-updates, dependency-updates, dev-dependency-updates]
    if: always()
    
    steps:
      - name: Send summary
        run: |
          echo "## üì¶ Dependency Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.security-updates.result }}" == "success" ]]; then
            echo "‚úÖ **Security Updates:** Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Security Updates:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.dependency-updates.result }}" == "success" ]]; then
            echo "‚úÖ **Dependency Updates:** Completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.dependency-updates.result }}" == "failure" ]]; then
            echo "‚ùå **Dependency Updates:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Dependency Updates:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.dev-dependency-updates.result }}" == "success" ]]; then
            echo "‚úÖ **Dev Dependency Updates:** Completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.dev-dependency-updates.result }}" == "failure" ]]; then
            echo "‚ùå **Dev Dependency Updates:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Dev Dependency Updates:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi